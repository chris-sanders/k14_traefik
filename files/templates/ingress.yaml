#@ load("@ytt:data", "data")
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-tls-dashboard
  namespace: #@ data.values.traefik.namespace
spec:
  entryPoints:
    - websecure
  routes:
    - match: #@ "Host(`{}`)".format(data.values.traefik.dashboard.hostname)
      kind: Rule
      #@ if data.values.traefik.dashboard.users:
      middlewares:
      - name: auth
      #@ end
      services:
      - name: api@internal
        kind: TraefikService
  #@ if data.values.traefik.custom_cert:
  tls: 
    secretName: traefik-cert
  #@ else:
  tls: {}
  #@ end
#@ if data.values.traefik.dashboard.users:
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: auth
  namespace: #@ data.values.traefik.namespace
spec:
  basicAuth:
    secret: authsecret
#@ end
#@ if hasattr(data.values.traefik, "ingress_routes"):
#@ for app in data.values.traefik.ingress_routes:
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: #@ "traefik-tls-{}".format(app.name)
  namespace: #@ app.namespace
spec:
  entryPoints:
    #@ if app.insecure:
    - web
    #@ else:
    - websecure
    #@ end
  routes:
    - match: #@ "Host(`{}`)".format(app.uri)
      kind: Rule
      #@ if hasattr(app, "require_local"):
      #@ if app.require_local:
      middlewares:
      - name: local-ipwhitelist
      #@ end
      #@ end
      services:
      - name: #@ app.service_name
        port: #@ app.service_port
        namespace: #@ app.namespace
  #@ if not app.insecure:
  #@ if data.values.traefik.custom_cert:
  tls:
      secretName: traefik-cert
  #@ else:
  tls: {}
  #@ end
  #@ end
#@ end
#@ end
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: local-ipwhitelist
spec:
  ipWhiteList:
    sourceRange:
      - 10.0.0.0/8
      - 172.16.0.0/12
      - 192.168.0.0/16
#@ if hasattr(data.values.traefik, "ingress_routes_udp"):
#@ for app in data.values.traefik.ingress_routes_udp:
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRouteUDP
metadata:
  name: #@ "traefik-udp-{}".format(app.name)
  namespace: #@ app.namespace
spec:
  entryPoints:
    - #@ app.entrypoint
  routes:
  - services:
      - name: #@ app.name
        port: #@ app.port
        namespace: #@ app.namespace
#@ end
#@ end
#@ if hasattr(data.values.traefik, "default_route"):
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-default-tls-route
  namespace: #@ data.values.traefik.namespace
spec:
  entryPoints:
    - websecure
  routes:
    - match: HostRegexp(`{catchall:.*}`)
      kind: Rule
      priority: 1
      services:
      - name: service-default-route
        port: 443
  #@ if data.values.traefik.custom_cert:
  tls:
      secretName: traefik-cert
  #@ else:
  tls: {}
  #@ end
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-default-route
  namespace: #@ data.values.traefik.namespace
spec:
  entryPoints:
    - web
  routes:
    - match: HostRegexp(`{catchall:.*}`)
      kind: Rule
      priority: 1
      services:
      - name: service-default-route
        port: 80
---
apiVersion: v1
kind: Service
metadata:
  name: service-default-route
  namespace: #@ data.values.traefik.namespace
spec:
  ports:
    - protocol: TCP
      name: http
      port: 80
      targetPort: 80
    - protocol: TCP
      name: https
      port: 443
      targetPort: 443
---
apiVersion: v1
kind: Endpoints
metadata:
  name: service-default-route
  namespace: #@ data.values.traefik.namespace
subsets:
  - addresses:
      - ip: #@ data.values.traefik.default_route.address
    ports:
      - port: 80
        name: http
      - port: 443
        name: https
#@ end

